(this["webpackJsonpreact-gl-transition-image-example"]=this["webpackJsonpreact-gl-transition-image-example"]||[]).push([[0],{12:function(e,n,t){e.exports=t(26)},2:function(e,n,t){e.exports=t.p+"static/media/cat3.70aaec79.jpg"},26:function(e,n,t){"use strict";t.r(n);t(5);var r=t(0),a=t.n(r),s=t(4),o=t.n(s),i=t(11),c=t(1),l=t.n(c),u=t(6),v=t.n(u),p=t(7);function m(){return(m=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var f=a.a.forwardRef((function(e,n){var t=e.className,r=e.src,s=e.progress,o=e.style,i=e.transition,c=e.transitionAlpha,l=e.textures,u=e.mask,f=u?"\n    float rand(vec2 n) {\n        return fract(sin(dot(n, vec2(12.9898 + seed, 4.1414))) * 43758.5453);\n    }\n\n    float noise(vec2 p) {\n        vec2 ip = floor(p);\n        vec2 u = fract(p);\n\n        u = u*u*(3.0-2.0*u);\n\n        float res = mix(\n            mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n            mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),\n            u.y\n        );\n\n        return res*res;\n    }\n\n    vec4 getMaskColor(vec2 uv) {\n        vec2 uw = convertToCoverUvs(uv, textureResolutions[0]);\n        return texture2D(textures[0], uw);\n    }\n\n    vec4 transition(vec2 uv) {\n        vec4 col = getToColor(uv);\n        vec4 maskCol = getMaskColor(uv);\n\n        // white => transparent\n        maskCol.a = (maskCol.r + maskCol.g + maskCol.b)/3.;\n\n        // debug mask\n        // return maskCol;\n\n        return mix(\n            vec4(0.),\n\n            col - ((col*0.1+vec4(vec3(0.1), 0.)) - (maskCol * ((1./progress))))\n                * (1. - (1./progress)) * 4.,\n\n            progress\n        );\n    }\n":i,g=a.a.useMemo((function(){return u?[].concat(l,[u]):l}),[u,l]),d=a.a.useRef(null),h=a.a.useRef(null),x=a.a.useState(!1),y=x[0],b=x[1],k=a.a.useState(null),w=k[0],C=k[1],E=a.a.useState({image:null,textures:[]}),R=E[0],T=E[1],P=a.a.useRef(null),I=Object(p.a)({ref:P}),O=a.a.useMemo((function(){return 1e3*Math.random()}),[]);a.a.useEffect((function(){try{var e=new Promise((function(e){var n=new Image;n.onload=function(){e(n)},n.src=r})),n=[];return g.length>0&&(n=g.map((function(e){return new Promise((function(n){var t=new Image;t.onload=function(){n(t)},t.src=e}))}))),Promise.resolve(Promise.all([e].concat(n))).then((function(e){var n=e[0],t=e.slice(1);T({image:n,textures:t})}))}catch(t){Promise.reject(t)}}),[r,g]),a.a.useEffect((function(){if(!(y||!R.image||0===s||s>=1)){var e=h.current.getContext("webgl",{alpha:!0,antialias:!0,stencil:!1,preserveDrawingBuffer:!1});d.current=v()({gl:e}),b(!0)}}),[y,R,s]),a.a.useEffect((function(){if(y&&R.image){var e=d.current,n=e.texture({data:R.image,flipY:!0}),t=R.textures.reduce((function(n,t,r){var a;return m({},n,((a={})["textures["+r+"]"]=e.texture({data:t,flipY:!0}),a))}),{}),r=R.textures.reduce((function(e,n,t){var r;return m({},e,((r={})["textureResolutions["+t+"]"]=[n.width,n.height],r))}),{}),a=e({frag:"\n                precision highp float;\n\n                uniform sampler2D image;\n                uniform vec2 resolution;\n                uniform vec2 imageResolution;\n                uniform float progress, seed;\n\n                "+(R.textures.length>0?"\n                    uniform sampler2D textures["+R.textures.length+"];\n                    uniform vec2 textureResolutions["+R.textures.length+"];\n                ":"")+'\n\n                varying vec2 uv;\n\n                // draw image using "background-size: cover"-ish fill\n                // https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n                vec2 convertToCoverUvs(vec2 uv, vec2 imageRes) {\n                    vec2 s = resolution; // screen\n                    vec2 i = imageRes; // image\n\n                    float rs = s.x / s.y;\n                    float ri = i.x / i.y;\n\n                    vec2 new = rs < ri\n                        ? vec2(i.x * s.y / i.y, s.y)\n                        : vec2(s.x, i.y * s.x / i.x);\n\n                    vec2 offset = rs < ri\n                        ? vec2((new.x - s.x) / 2.0, 0.0) / new\n                        : vec2(0.0, (new.y - s.y) / 2.0) / new;\n\n                    vec2 uw = uv * s / new + offset;\n\n                    return uw;\n                }\n\n                vec4 getFromColor(vec2 st) {\n                    return vec4(0.);\n                }\n\n                vec4 getToColor(vec2 uv) {\n                    vec2 uw = convertToCoverUvs(uv, imageResolution);\n                    return texture2D(image, uw);\n                }\n\n                '+f+"\n\n                void main () {\n                    gl_FragColor = transition(uv);\n                    "+(c?"gl_FragColor.a = progress;":"")+"\n                }\n            ",vert:"\n                precision highp float;\n\n                attribute vec2 position;\n                uniform vec2 resolution;\n                varying vec2 uv;\n\n                void main () {\n                    uv = 1. - position;\n                    gl_Position = vec4(1.0 - 2.0 * position, 0, 1);\n                }\n            ",attributes:{position:[-2,0,0,-2,2,2]},uniforms:m({progress:e.prop("progress"),resolution:e.prop("resolution"),seed:O,image:n,imageResolution:[R.image.width,R.image.height]},r,t),blend:{enable:!0,func:{srcRGB:"src alpha",srcAlpha:"src alpha",dstRGB:"one minus src alpha",dstAlpha:"one minus src alpha"}},depth:{enable:!1},count:3});C({drawImage:a})}}),[y,R,O,c,f]),a.a.useEffect((function(){if(y&&w&&0!==s){var e=d.current;e.clear({color:[0,0,0,0],depth:1}),w.drawImage({progress:s,resolution:[I.width,I.height]}),e&&s>=1&&(e.destroy(),d.current=null,b(!1))}}),[y,w,s,I]);var j=m({position:"relative",width:"100%",height:"100%"},o),N={position:"absolute",top:"0",left:"0",width:"100%",height:"100%",backgroundImage:"url('"+r+"')",backgroundSize:"cover",backgroundPosition:"center"};return a.a.createElement("div",{className:t,style:j,ref:P},s<=1&&a.a.createElement("div",{ref:n,style:{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}},a.a.createElement("canvas",{ref:h,width:I.width,height:I.height})),s>=1&&a.a.createElement("div",{style:N}))}));f.propTypes={src:l.a.string.isRequired,progress:l.a.number.isRequired,className:l.a.string,style:l.a.objectOf(l.a.string),transition:l.a.string,transitionAlpha:l.a.bool,textures:l.a.arrayOf(l.a.string),mask:l.a.string},f.defaultProps={className:"",style:{},transition:"\n    // https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\n    float rand(vec2 n) {\n        return fract(sin(dot(n, vec2(12.9898 + seed, 4.1414))) * 43758.5453);\n    }\n\n    float noise(vec2 p) {\n        vec2 ip = floor(p);\n        vec2 u = fract(p);\n\n        u = u*u*(3.0-2.0*u);\n\n        float res = mix(\n            mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n            mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),\n            u.y\n        );\n\n        return res*res;\n    }\n\n    vec4 transition(vec2 uv) {\n        vec4 col = getToColor(uv);\n\n        // generate blobby noise mask\n        float mask = pow(smoothstep(0.1, 1., clamp(noise(uv*4.) + noise(uv*3.5), 0.2, 1.)), 2.);\n        vec4 maskCol = vec4(vec3(mask), 1.);\n\n        // white => transparent\n        maskCol.a = (maskCol.r + maskCol.g + maskCol.b)/3.;\n\n        // debug mask\n        // return maskCol;\n\n        return mix(\n            vec4(0.),\n            col - ((col*0.1+vec4(vec3(0.1), 0.)) - (maskCol * ((1./progress))))\n                * (1. - (1./progress)) * 4.,\n            progress\n        );\n    }\n",transitionAlpha:!1,textures:[],mask:null};var g=f,d=t(9),h=t(10),x=t(3),y=t.n(x),b=t(2),k=t.n(b),w=t(8),C=t.n(w),E=({src:e,textures:n,mask:t,transition:r})=>{var s=Object(d.a)({threshold:0,triggerOnce:!0}),o=Object(i.a)(s,2),c=o[0],l=o[1];return a.a.createElement("div",{className:"image"},a.a.createElement(h.Spring,{config:{tension:180,friction:45,clamp:!0},to:{fadeProgress:l?1:0,scale:l?1:.9,yPos:l?0:80}},s=>a.a.createElement(g,{ref:c,src:e,mask:t,textures:n,transition:r,progress:s.fadeProgress,style:{transform:"scale(".concat(s.scale,") translate3d(0, ").concat(s.yPos,"px, 0)")}})))},R=()=>a.a.createElement(a.a.Fragment,null,[...Array(5)].map((e,n)=>a.a.createElement("div",{className:"wrapper",key:n},a.a.createElement("h2",null,"Default transition"),a.a.createElement(E,{src:y.a}),a.a.createElement("h2",null,"Water"),a.a.createElement(E,{src:k.a,transition:"\n    const float amplitude = 30.;\n    const float speed = 10.;\n\n    vec4 transition(vec2 p) {\n        vec2 dir = p - vec2(.5);\n        float dist = length(dir);\n\n        if (dist > progress) {\n            return vec4(0.);\n        } else {\n            vec2 offset = dir * sin(dist * amplitude - progress * speed);\n            return getToColor( p + (offset * (1. - 1./progress)) );\n        }\n    }\n"}),a.a.createElement("h2",null,"Blur"),a.a.createElement(E,{src:k.a,transition:"\n    const float intensity = 0.3;\n    const int passes = 6;\n\n    vec4 transition(vec2 uv) {\n        vec4 c1 = vec4(0.0);\n        vec4 c2 = vec4(0.0);\n\n        float disp = intensity*(0.5-distance(0.5, progress));\n        for (int xi=0; xi<passes; xi++) {\n            float x = float(xi) / float(passes) - 0.5;\n            for (int yi=0; yi<passes; yi++) {\n                float y = float(yi) / float(passes) - 0.5;\n                vec2 v = vec2(x,y);\n                float d = disp;\n                c2 += getToColor( uv + d*v);\n            }\n        }\n\n        c2 /= float(passes*passes);\n        return mix(c1, c2, progress);\n    }\n"}),a.a.createElement("h2",null,"Image mask"),a.a.createElement(E,{src:k.a,mask:C.a}),a.a.createElement("h2",null,"Glitch"),a.a.createElement(E,{src:y.a,transition:"\n    vec4 transition(vec2 p) {\n        vec2 block = floor(p.xy / vec2(16));\n        vec2 uv_noise = block / vec2(64);\n        uv_noise += floor(vec2(progress) * vec2(1200.0, 3500.0)) / vec2(64);\n        vec2 dist = progress > 0.0 ? (fract(uv_noise) - 0.5) * 0.3 *(1.0 -progress) : vec2(0.0);\n\n        vec2 red = p + dist * 0.2;\n        vec2 green = p + dist * .3;\n        vec2 blue = p + dist * .5;\n\n        return vec4(\n            getToColor(red).r,\n            getToColor(green).g,\n            getToColor(blue).b,\n            1.0\n        );\n    }\n"}),a.a.createElement("h2",null,"Polka"),a.a.createElement(E,{src:k.a,transition:"\n    const float SQRT_2 = 1.414213562373;\n\n    float dots = 20.0;\n    vec2 center = vec2(0, 0);\n\n    vec4 transition(vec2 uv) {\n        bool nextImage = distance(fract(uv * dots), vec2(0.5, 0.5)) < ( progress / distance(uv, center));\n        return nextImage ? getToColor(uv) : getFromColor(uv);\n    }\n"}),a.a.createElement("h2",null,"Noise swirl"),a.a.createElement(E,{src:y.a,transition:"\n    float rand(vec2 n) {\n        return fract(sin(dot(n, vec2(12.9898 + seed, 4.1414))) * 43758.5453);\n    }\n\n    float noise(vec2 p){\n        vec2 ip = floor(p);\n        vec2 u = fract(p);\n\n        u = u*u*(3.0-2.0*u);\n\n        float res = mix(\n            mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n            mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),\n            u.y\n        );\n\n        return res*res;\n    }\n\n    vec4 transition(vec2 uv) {\n        return getToColor(uv + (noise(uv*4.)*(1. - (1./progress))));\n    }\n"}))));o.a.render(a.a.createElement(R,null),document.getElementById("root"))},3:function(e,n,t){e.exports=t.p+"static/media/cat2.03e391d0.png"},5:function(e,n,t){},8:function(e,n,t){e.exports=t.p+"static/media/mask.4b652f63.png"}},[[12,1,2]]]);
//# sourceMappingURL=main.4971da98.chunk.js.map